# You are working as a data scientist for a fictional cybersecurity company. As part of your job, you need to analyze log files generated by various network devices. Each log file contains multiple entries, and each entry follows a specific format:
#
# Timestamp | Source IP | Destination IP | Protocol | Status
#
# Your task is to create a Python class called "LogAnalyzer" that performs the following operations:
#
# 1.	Read the log file and count the total number of entries.
# 2.	Find the percentage of successful connections (entries with a "Status" of "Success") out of the total number of entries.
# 3.	Determine the unique source IP addresses present in the log file.
# 4.	Calculate the average number of entries per source IP address.
# 5.	Write the analysis results to a new file named "log_analysis.txt".

class LogAnalyzer:
    def __init__(self, log_file_path):
        self.log_file_path = log_file_path


    def analyze_log_file(self):
        total_entries = 0
        success_entries = 0
        unique_source_ips = set()
        entries_per_source_ip = {}

        # Read the log file and analyze the entries
        with open(self.log_file_path, 'r') as file:
            for line in file:
                total_entries += 1
                timestamp, source_ip, destination_ip, protocol, status = line.strip().split(' | ')

                # Count successful connections
                if status == 'Success':
                    success_entries += 1

                # Track unique source IP addresses
                unique_source_ips.add(source_ip)

                # Track number of entries per source IP address
                if source_ip in entries_per_source_ip:
                    entries_per_source_ip[source_ip] += 1
                else:
                    entries_per_source_ip[source_ip] = 1

        # Calculate the percentage of successful connections
        success_percentage = (success_entries / total_entries) * 100

        # Calculate the average number of entries per source IP address
        total_source_ips = len(unique_source_ips)
        average_entries_per_source_ip = total_entries / total_source_ips if total_source_ips > 0 else 0

        # Write the analysis results to a new file
        analysis_result = f"Total Entries: {total_entries}\n"
        analysis_result += f"Success Percentage: {success_percentage:.2f}%\n"
        analysis_result += f"Unique Source IP Addresses: {', '.join(unique_source_ips)}\n"
        analysis_result += f"Average Entries per Source IP: {average_entries_per_source_ip:.2f}\n"

        with open('log_analysis.txt', 'w') as file:
            file.write(analysis_result)

# Usage example:
analyzer = LogAnalyzer('log_file.txt')
analyzer.analyze_log_file()
